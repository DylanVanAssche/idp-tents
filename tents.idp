/*
 * tents.idp
 * Olivier Van den Eede & Dylan Van Assche
 */

vocabulary V {
    // Types
    type Rij isa int
    type Kolom isa int
    type Aantal isa int
    
    // Relaties
    Tenten(Rij, Kolom) 		// Vak is een tent
    Bomen(Rij, Kolom) 		// Vak is een boom
    
    // Geen Leeg want af te leiden uit Tenten en Bomen
    AantalPerRij(Rij): Aantal
    AantalPerKolom(Kolom): Aantal
    
    Verbonden(Rij, Kolom, Rij, Kolom) // Tent rij, Tent kolom, Boom rij, Boom kolom
}

structure S: V {
    // 5x5 vierkant, max aantal tenten = 2 per rij of kolom
    Rij = {1 .. 5}
    Kolom = {1 .. 5}
    Aantal = {0 .. 2}
    
    // Rij en kolom starten vanaf 1 in de linkerbovenhoek
    AantalPerRij = {
		1 -> 2;
        2 -> 0;
        3 -> 2;
        4 -> 0;
        5 -> 1;
    }
    
    AantalPerKolom = {
		1 -> 2;
        2 -> 0;
        3 -> 1;
        4 -> 0;
        5 -> 2;
    }
    
   	Bomen = {
        1,2;
        2,5;
        3,2;
        3,4;
        4,5;
    }
}

theory T: V {
    // Elke tent is verbonden met exact 1 boom (horizontaal of verticaal)
    // Tent mag naast meerdere bomen staan, maar slechts verbonden met 1 boom
    
    // Een tent mag enkel verbonden worden met een boom
    // Dit mapt de tenten op de juiste plaats al maar de Verbonden = {} is nu met alle bomen. We moeten dit limiteren tot 1 boom per tent.
    !rt[Rij], kt[Kolom], rb[Rij], kb[Kolom]: Tenten(rt, kt) & Bomen(rb, kb) <=> Verbonden(rt, kt, rb, kb).
    
    // Elke tent mag met slechts 1 boom verbonden worden
    
    // Evenveel tenten als bomen
    #{r[Rij], k[Kolom]: Tenten(r,k)} = #{r[Rij], k[Kolom]: Bomen(r,k)}.
    
    // De getallen geven aan hoeveel tenten er in de gegeven rij of kolom mogen staan
    !r[Rij]: AantalPerRij(r) = #{k[Kolom]: Tenten(r, k)}.
    !k[Kolom]: AantalPerKolom(k) = #{r[Rij]: Tenten(r, k)}.
    
    // Tenten mogen elkaar niet raken
}

procedure main() {
    stdoptions.nbmodels = 3
    printmodels(modelexpand(T, S))
}